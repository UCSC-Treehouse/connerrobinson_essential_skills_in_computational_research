---
title: "Chapter_14"
format: gfm
---
```{r}
library(tidyverse)
```

```{r}
library(babynames)
```

# Strings
```{r}
string1 <- "This is a string"
string2 <- 'If I want to include a "quote" inside a string, I use single quotes'
```
#str_view(): To see the raw contents of the string

# Escapes

```{r}
double_quote <- "\"" # or '"'
single_quote <- '\'' # or "'"
backslash <- "\\"
```

```{r}
x2 <- c(single_quote, double_quote, backslash)
x2
str_view(x2)
```

# Raw Strings
```{r}
tricky <- "double_quote <- \"\\\"\" # or '\"'
single_quote <- '\\'' # or \"'\""
str_view(tricky)
```

```{r}
tricky <- r"(double_quote <- "\"" # or '"'
single_quote <- '\'' # or "'")"
str_view(tricky)
```

# Other Special Characters 
```{r}
x1 <- c("one\ntwo", "one\ttwo", "\u00b5", "\U0001f604")
x1
str_view(x1)
```
#You can see the complete list of other special characters in ?Quotes.

# Exercises pt 1 of 3
# Question 1
```{r}
string_1 <- "He said \"That’s amazing!\""
string_2 <- "\\"
string_3 <- ''
str_view(string_1)
str_view(string_2)
str_view(string_3)
```
# Question 2
```{r}
t <- "This\u00a0is\u00a0tricky"
print(t)
str_view(t)
```
#\u00a0 is a Unicode escape sequence, representing the non-breaking space character

# str_c()
#str_c() takes any number of vectors as arguments and returns a character vector
```{r}
str_c("x", "y")
str_c("x", "y", "z")
str_c("Hello ", c("John", "Susan"))
```
```{r}
df <- tibble(name = c("Flora", "David", "Terra", NA))
df |> mutate(greeting = str_c("Hi ", name, "!"))
```
```{r}
df |> 
  mutate(
    greeting1 = str_c("Hi ", coalesce(name, "you"), "!"),
    greeting2 = coalesce(str_c("Hi ", name, "!"), "Hi!")
  )
```

# str_glue()
# give it a single string that has a special feature: anything inside {} will be evaluated like it’s outside of the quotes:
```{r}
df |> mutate(greeting = str_glue("Hi {name}!"))
```
```{r}
df |> mutate(greeting = str_glue("{{Hi {name}!}}"))
```

# str_flatten()
#str_flatten(): takes a character vector and combines each element of the vector into a single string:
```{r}
str_flatten(c("x", "y", "z"))
str_flatten(c("x", "y", "z"), ", ")
str_flatten(c("x", "y", "z"), ", ", last = ", and ")
```
```{r}
df <- tribble(
  ~ name, ~ fruit,
  "Carmen", "banana",
  "Carmen", "apple",
  "Marvin", "nectarine",
  "Terence", "cantaloupe",
  "Terence", "papaya",
  "Terence", "mandarin"
)
df |>
  group_by(name) |> 
  summarize(fruits = str_flatten(fruit, ", "))
```

# Exercises pt 2 of 3
# Question 1
```{r}
str_c("hi ", NA)
paste0("hi ", NA)
paste0(letters[1:2], letters[1:3])
```
#str_c() returns only NA if in input

# Question 2
#paste(): joins strings together, inserting a space between them
#paste0(): joins strings together without a space between them 
#str_c(), like paste0() does not add a space. To mimic paste() the sep argument can be used at the end of the string. 
```{r}
str_c("a", "b", "c", sep = " ")
```
# Question 3
```{r}
food <- "cookie"
price <- 1.00
str_glue("The price of {food} is {price}")
```
```{r}
age <- 20
country <- "United States"
str_c("I’m ", age, " years old and live in ", country)
```
```{r}
title <- "Manager"
str_glue("\\section{{{title}}}")
```
# Extracting Data from Strings
#Four tiydr functions:
#df |> separate_longer_delim(col, delim)
#df |> separate_longer_position(col, width)
#df |> separate_wider_delim(col, delim, names)
#df |> separate_wider_position(col, widths)

# Separating into Rows
#use "longer" in  separate_wider_delim() 
```{r}
df1 <- tibble(x = c("a,b,c", "d,e", "f"))
df1 |> 
  separate_longer_delim(x, delim = ",")
```
```{r}
df2 <- tibble(x = c("1211", "131", "21"))
df2 |> 
  separate_longer_position(x, width = 1)
```
#delim =  delimiter

# Separating into Columns
#use "wider" in  separate_wider_delim(0
```{r}
df3 <- tibble(x3 = c("a10.1.2022", "b10.2.2011", "e15.1.2015"))
df3 |> 
  separate_wider_delim(
    x3,
    delim = ".",
    names = c("code", "edition", "year")
  )
```

```{r}
df4 <- tibble(x4 = c("202215TX", "202122LA", "202325CA")) 
df4 |> 
  separate_wider_position(
    x4,
    widths = c(year = 4, age = 2, state = 2)
  )
```

# Diagnosing Widening Problems
#separate_wider_delim() requires a fixed and known set of columns. What happens if some of the rows don’t have the expected number of pieces?

#x_pieces tells us how many pieces were found, compared to the expected 3


df |> 
  separate_wider_delim(
    x,
    delim = "-",
    names = c("x", "y", "z"),
    too_few = "align_start"


# Letters: Length
#str_length() tells you the number of letters in the string
```{r}
str_length(c("a", "R for data science", NA))
```

```{r}
babynames |>
  count(length = str_length(name), wt = n)
  
babynames |> 
  filter(str_length(name) == 15) |> 
  count(name, wt = n, sort = TRUE)
```

# Letters: Subsetting
#You can extract parts of a string using str_sub(string, start, end)
```{r}
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
```
```{r}
str_sub(x, -3, -1)
```
```{r}
str_sub("a", 1, 5)
```
```{r}
babynames |> 
  mutate(
    first = str_sub(name, 1, 1),
    last = str_sub(name, -1, -1)
  )
```

# Exercises pt 3 of 3
# Question 1
#The arugment wt = n in the count() function plotted the count or weight of baby names in the "n" column.

# Question 2
#Use name_lengths/2
#Question 3
```{r}
babynames <- babynames %>%
  mutate(name_length = str_length(name))
```
```{r}
avg_length <- babynames %>%
  group_by(year) %>%
  summarise(avg_length = weighted.mean(name_length, n))

ggplot(avg_length, aes(x = year, y = avg_length)) +
  geom_line(color = "steelblue") +
  labs(x = "Year", y = "Average Name Length")
```
#The average length of baby names has gradually increased over time, peaking in the late 1900s.

```{r}
babynames <- babynames %>%
  mutate(first_letter = str_sub(name, 1, 1))

first_letters <- babynames %>%
  group_by(year, first_letter) %>%
  summarise(total = sum(n), .groups = "drop")

# Plot for a few key letters (e.g., A, J, M)
letters_to_plot <- c("A", "J", "M")
ggplot(filter(first_letters, first_letter %in% letters_to_plot),
       aes(x = year, y = total, color = first_letter)) +
  geom_line() +
  labs(x = "Year", y = "Number of Babies")

```
#The first letters A, J, and M have remained the most popular over time.

```{r}
babynames <- babynames %>%
  mutate(last_letter = str_sub(name, -1, -1))

last_letters <- babynames %>%
  group_by(year, last_letter) %>%
  summarise(total = sum(n), .groups = "drop")

letters_to_plot <- c("a", "n", "e")
ggplot(filter(last_letters, last_letter %in% letters_to_plot),
       aes(x = year, y = total, color = last_letter)) +
  geom_line() +
  labs(x = "Year", y = "Number of Babies")
```
#The last letters a, e, and n have increased in popularity over time for baby names. 
